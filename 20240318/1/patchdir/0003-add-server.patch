From 6278c4b00f3f17e8101bc88e05283d8269379653 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=D0=90=D0=BD=D0=B4=D1=80=D0=B5=D0=B9=20=D0=91=D1=83=D1=82?=
 =?UTF-8?q?=D1=8B=D0=BB=D0=BA=D0=B8=D0=BD?= <s02210339@gse.cs.msu.ru>
Date: Sun, 24 Mar 2024 20:56:52 +0300
Subject: [PATCH 3/6] add server

---
 20240318/1/client.py |  13 ++---
 20240318/1/server.py | 126 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 133 insertions(+), 6 deletions(-)
 create mode 100644 20240318/1/server.py

diff --git a/20240318/1/client.py b/20240318/1/client.py
index 69e849f..bcf6897 100644
--- a/20240318/1/client.py
+++ b/20240318/1/client.py
@@ -29,19 +29,19 @@ class InterGame(cmd.Cmd):
 
 
     def do_up(self, args):
-        self.s.sendall("move 1 0".encode())
+        self.s.sendall("move 1 0\n".encode())
 
 
     def do_down(self, args):
-        self.s.sendall("move -1 0".encode())
+        self.s.sendall("move -1 0\n".encode())
 
 
     def do_left(self, args):
-        self.s.sendall("move 0 -1".encode())
+        self.s.sendall("move 0 -1\n".encode())
 
 
     def do_right(self, args):
-        self.s.sendall("move 0 1".encode())
+        self.s.sendall("move 0 1\n".encode())
 
 
     def do_addmon(self, args):
@@ -88,7 +88,7 @@ class InterGame(cmd.Cmd):
             if hitpoints <= 0:
                 raise TypeError
 
-            self.s.sendall(f"addmon {x} {y} '{hello_string}' {monster_name} {hitpoints}".encode())
+            self.s.sendall(f"addmon {x} {y} '{hello_string}' {monster_name} {hitpoints}\n".encode())
             #self.area.addmon(x, y, hello_string, monster_name, hitpoints)
         except:
             print("Invalid arguments")
@@ -104,7 +104,7 @@ class InterGame(cmd.Cmd):
         if len(a) > 2 and a[1] == 'with':
             weapon_name = a[2]
 
-        self.s.sendall(f"attack {monster_name} with {weapon_name}".encode())
+        self.s.sendall(f"attack {monster_name} with {weapon_name}\n".encode())
 
 
     def complete_attack(self, text, line, begidx, endidx):
@@ -117,6 +117,7 @@ class InterGame(cmd.Cmd):
 
 
     def do_EOF(self, args):
+        self.s.sendall("\0".encode())
         self.s.close()
         print()
         return True
diff --git a/20240318/1/server.py b/20240318/1/server.py
new file mode 100644
index 0000000..1c06120
--- /dev/null
+++ b/20240318/1/server.py
@@ -0,0 +1,126 @@
+from cowsay import cowsay, list_cows, read_dot_cow
+from io import StringIO
+import sys
+import shlex
+import cmd
+import readline
+import rlcompleter
+import asyncio
+
+
+class MonsterConst():
+    def __init__(self):
+        self.cow = read_dot_cow(StringIO("""
+        $the_cow = <<EOC;
+            ,_                    _,
+            ) '-._  ,_    _,  _.-' (
+            )  _.-'.|\\\0\\--//|.'-._  (
+             )'   .'\\/o\\/o\\/'.   `(
+              ) .' . \\====/ . '. (
+               )  / <<    >> \\  (
+                '-._/``  ``\\_.-'
+          jgs     __\\\0\\'--'//__
+                 (((""`  `"")))
+        EOC
+        """))
+
+
+class Monster():
+    def __init__(self, x, y, hi, name, hp):
+        self.x = x
+        self.y = y
+        self.text = hi
+        self.name = name
+        self.jgsbat = MonsterConst().cow
+        self.hp = hp
+
+
+    def __str__(self):
+        if self.name == "jgsbat":
+            return cowsay(self.text, cowfile=self.jgsbat)
+        else:
+            return cowsay(self.text, cow=self.name)
+
+
+class Pers():
+    def __init__(self, x=0, y=0):
+        self.x = x
+        self.y = y
+
+
+    def move_x(self, step):
+        self.x += step
+        
+        if self.x == -1:
+            self.x = 9
+        elif self.x == 10:
+            self.x = 0
+
+
+    def move_y(self, step):
+        self.y -= step
+
+        if self.y == -1:
+            self.y = 9
+        elif self.y == 10:
+            self.y = 0
+
+
+class Area():
+    def __init__(self):
+        self.pers = Pers()
+        self.monster = [[None for j in range(10)] for i in range(10)]
+
+
+    def moved_to(self, direction):
+        match direction:
+            case 'up':
+                self.pers.move_y(1)
+            case 'down':
+                self.pers.move_y(-1)
+            case 'left':
+                self.pers.move_x(-1)
+            case 'right':
+                self.pers.move_x(1)
+
+        print(f"Moved to ({self.pers.x}, {self.pers.y})")
+
+        self.encounter(self.pers.x, self.pers.y)
+
+
+    def addmon(self, x, y, hi, name, hp):
+        if name not in list_cows() and name != "jgsbat":
+            print("Cannot add unknown monster")
+            return 
+
+        vr_monster = self.monster[x][y]
+
+        self.monster[x][y] = Monster(x, y, hi, name, hp)
+        
+        print(f"Added monster {name} to ({x}, {y}) saying {hi}")
+
+        if vr_monster is not None:
+            print("Replaced the old monster")
+
+
+    def encounter(self, x, y):
+        if self.monster[x][y] is not None:
+            print(self.monster[x][y])
+
+
+async def echo(reader, writer):
+    area = Area()
+
+    while data := await reader.readline():
+        print(data)
+        writer.write(data.swapcase())
+    writer.close()
+    await writer.wait_closed()
+
+async def main():
+    server = await asyncio.start_server(echo, '0.0.0.0', 1337)
+    async with server:
+        await server.serve_forever()
+
+if __name__ == "__main__":    
+    asyncio.run(main())
-- 
2.44.0

